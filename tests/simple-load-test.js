/**
 * –ü—Ä–æ—Å—Ç–æ–π –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –±–∏–ª—å—è—Ä–¥–∞
 * 
 * –ó–∞–ø—É—Å–∫: node tests/simple-load-test.js
 * 
 * –ß—Ç–æ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç:
 * - –°–æ–∑–¥–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∏–≥—Ä
 * - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤
 * - –£—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏
 * - –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
 */

const io = require('socket.io-client');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const SERVER_URL = 'http://localhost:2083';
const NUM_GAMES = 20; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
const GAME_DURATION = 10000; // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã (–º—Å)
const DELAY_BETWEEN_GAMES = 500; // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–∑–¥–∞–Ω–∏–µ–º –∏–≥—Ä (–º—Å)

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
const stats = {
  gamesCreated: 0,
  gamesFailed: 0,
  playersConnected: 0,
  playersDisconnected: 0,
  errors: [],
  startTime: Date.now(),
  memorySnapshots: []
};

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function logStats() {
  const elapsed = ((Date.now() - stats.startTime) / 1000).toFixed(1);
  const memUsage = process.memoryUsage();
  
  console.log('\n' + '='.repeat(60));
  log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (${elapsed}s)`, 'cyan');
  console.log('='.repeat(60));
  log(`‚úÖ –ò–≥—Ä —Å–æ–∑–¥–∞–Ω–æ: ${stats.gamesCreated}`, 'green');
  log(`‚ùå –ò–≥—Ä –ø—Ä–æ–≤–∞–ª–µ–Ω–æ: ${stats.gamesFailed}`, 'red');
  log(`üë• –ò–≥—Ä–æ–∫–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ: ${stats.playersConnected}`, 'blue');
  log(`üëã –ò–≥—Ä–æ–∫–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–æ: ${stats.playersDisconnected}`, 'yellow');
  log(`üíæ –ü–∞–º—è—Ç—å: ${(memUsage.heapUsed / 1024 / 1024).toFixed(2)} MB`, 'cyan');
  
  if (stats.errors.length > 0) {
    log(`\n‚ö†Ô∏è –û—à–∏–±–∫–∏ (${stats.errors.length}):`, 'red');
    stats.errors.slice(0, 5).forEach(err => {
      console.log(`  - ${err}`);
    });
    if (stats.errors.length > 5) {
      console.log(`  ... –∏ –µ—â–µ ${stats.errors.length - 5} –æ—à–∏–±–æ–∫`);
    }
  }
  console.log('='.repeat(60) + '\n');
}

function createGame(gameNumber) {
  return new Promise((resolve) => {
    log(`üéÆ –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã #${gameNumber}...`, 'blue');
    
    const player1 = io(SERVER_URL, {
      transports: ['websocket'],
      reconnection: false
    });
    
    const player2 = io(SERVER_URL, {
      transports: ['websocket'],
      reconnection: false
    });
    
    let roomid = null;
    let gameStarted = false;
    
    // –¢–∞–π–º–∞—É—Ç –¥–ª—è –∏–≥—Ä—ã
    const gameTimeout = setTimeout(() => {
      if (!gameStarted) {
        stats.gamesFailed++;
        log(`‚ùå –ò–≥—Ä–∞ #${gameNumber} –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å (timeout)`, 'red');
      }
      
      // –û—Ç–∫–ª—é—á–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤
      player1.disconnect();
      player2.disconnect();
      resolve();
    }, GAME_DURATION);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
    player1.on('connect_error', (err) => {
      stats.errors.push(`Game #${gameNumber} P1 connect error: ${err.message}`);
    });
    
    player2.on('connect_error', (err) => {
      stats.errors.push(`Game #${gameNumber} P2 connect error: ${err.message}`);
    });
    
    // –ò–≥—Ä–æ–∫ 1 —Å–æ–∑–¥–∞–µ—Ç –∫–æ–º–Ω–∞—Ç—É
    player1.on('connect', () => {
      stats.playersConnected++;
      
      player1.emit('createroom-req', {
        amount: 100,
        isPrivate: false
      });
    });
    
    player1.on('createroom-res', (data) => {
      if (data.success) {
        roomid = data.roomid;
        stats.gamesCreated++;
        log(`‚úÖ –ò–≥—Ä–∞ #${gameNumber} —Å–æ–∑–¥–∞–Ω–∞ (${roomid})`, 'green');
        
        // –ò–≥—Ä–æ–∫ 2 –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è
        player2.emit('joinroom-req', roomid);
      } else {
        stats.gamesFailed++;
        stats.errors.push(`Game #${gameNumber} creation failed: ${data.msg}`);
        clearTimeout(gameTimeout);
        player1.disconnect();
        player2.disconnect();
        resolve();
      }
    });
    
    // –ò–≥—Ä–æ–∫ 2 –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è
    player2.on('connect', () => {
      stats.playersConnected++;
    });
    
    player2.on('joinroom-res', (data) => {
      if (data.success) {
        gameStarted = true;
        log(`üë• –ò–≥—Ä–æ–∫ 2 –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ #${gameNumber}`, 'green');
        
        // –î–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —É–¥–∞—Ä–æ–≤ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –∏–≥—Ä—ã
        setTimeout(() => {
          player1.emit('player-shot', {
            vForce: { x: 50, y: 0 },
            vSpin: { x: 0, y: 0 }
          });
        }, 1000);
        
        setTimeout(() => {
          player2.emit('player-shot', {
            vForce: { x: -50, y: 0 },
            vSpin: { x: 0, y: 0 }
          });
        }, 3000);
      } else {
        stats.errors.push(`Game #${gameNumber} join failed`);
      }
    });
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–π
    player1.on('disconnect', () => {
      stats.playersDisconnected++;
    });
    
    player2.on('disconnect', () => {
      stats.playersDisconnected++;
    });
  });
}

async function runLoadTest() {
  log('\nüöÄ –ó–∞–ø—É—Å–∫ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞...', 'cyan');
  log(`üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:`, 'yellow');
  log(`   - –°–µ—Ä–≤–µ—Ä: ${SERVER_URL}`, 'yellow');
  log(`   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä: ${NUM_GAMES}`, 'yellow');
  log(`   - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–≥—Ä—ã: ${GAME_DURATION}ms`, 'yellow');
  log(`   - –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∏–≥—Ä–∞–º–∏: ${DELAY_BETWEEN_GAMES}ms\n`, 'yellow');
  
  // –ù–∞—á–∞–ª—å–Ω—ã–π —Å–Ω–∏–º–æ–∫ –ø–∞–º—è—Ç–∏
  stats.memorySnapshots.push({
    time: 0,
    memory: process.memoryUsage().heapUsed
  });
  
  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const statsInterval = setInterval(logStats, 5000);
  
  // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
  for (let i = 1; i <= NUM_GAMES; i++) {
    await createGame(i);
    
    // –°–Ω–∏–º–æ–∫ –ø–∞–º—è—Ç–∏
    stats.memorySnapshots.push({
      time: Date.now() - stats.startTime,
      memory: process.memoryUsage().heapUsed
    });
    
    // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä–æ–π
    if (i < NUM_GAMES) {
      await new Promise(resolve => setTimeout(resolve, DELAY_BETWEEN_GAMES));
    }
  }
  
  // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∏–≥—Ä
  log('\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∏–≥—Ä...', 'yellow');
  await new Promise(resolve => setTimeout(resolve, GAME_DURATION + 2000));
  
  clearInterval(statsInterval);
  
  // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  log('\nüèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!', 'cyan');
  logStats();
  
  // –ê–Ω–∞–ª–∏–∑ —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
  analyzeMemoryLeaks();
  
  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  printFinalReport();
}

function analyzeMemoryLeaks() {
  if (stats.memorySnapshots.length < 2) return;
  
  const firstSnapshot = stats.memorySnapshots[0];
  const lastSnapshot = stats.memorySnapshots[stats.memorySnapshots.length - 1];
  
  const memoryGrowth = lastSnapshot.memory - firstSnapshot.memory;
  const memoryGrowthMB = (memoryGrowth / 1024 / 1024).toFixed(2);
  const memoryGrowthPercent = ((memoryGrowth / firstSnapshot.memory) * 100).toFixed(1);
  
  console.log('\n' + '='.repeat(60));
  log('üîç –ê–Ω–∞–ª–∏–∑ —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏', 'cyan');
  console.log('='.repeat(60));
  log(`–ù–∞—á–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å: ${(firstSnapshot.memory / 1024 / 1024).toFixed(2)} MB`, 'blue');
  log(`–ö–æ–Ω–µ—á–Ω–∞—è –ø–∞–º—è—Ç—å: ${(lastSnapshot.memory / 1024 / 1024).toFixed(2)} MB`, 'blue');
  log(`–†–æ—Å—Ç –ø–∞–º—è—Ç–∏: ${memoryGrowthMB} MB (${memoryGrowthPercent}%)`, 
      memoryGrowth > 50 * 1024 * 1024 ? 'red' : 'green');
  
  if (memoryGrowth > 50 * 1024 * 1024) {
    log('\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–∞—è —É—Ç–µ—á–∫–∞ –ø–∞–º—è—Ç–∏!', 'red');
    log('   –ü–∞–º—è—Ç—å –≤—ã—Ä–æ—Å–ª–∞ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 50 MB', 'red');
  } else {
    log('\n‚úÖ –£—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ', 'green');
  }
  console.log('='.repeat(60) + '\n');
}

function printFinalReport() {
  const totalTime = ((Date.now() - stats.startTime) / 1000).toFixed(1);
  const successRate = ((stats.gamesCreated / NUM_GAMES) * 100).toFixed(1);
  
  console.log('\n' + '='.repeat(60));
  log('üìã –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢', 'cyan');
  console.log('='.repeat(60));
  log(`‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: ${totalTime}s`, 'blue');
  log(`üéÆ –ò–≥—Ä —Å–æ–∑–¥–∞–Ω–æ: ${stats.gamesCreated}/${NUM_GAMES} (${successRate}%)`, 
      stats.gamesCreated === NUM_GAMES ? 'green' : 'yellow');
  log(`‚ùå –ò–≥—Ä –ø—Ä–æ–≤–∞–ª–µ–Ω–æ: ${stats.gamesFailed}`, 
      stats.gamesFailed === 0 ? 'green' : 'red');
  log(`üë• –í—Å–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: ${stats.playersConnected}`, 'blue');
  log(`üëã –í—Å–µ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏–π: ${stats.playersDisconnected}`, 'blue');
  log(`‚ö†Ô∏è  –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: ${stats.errors.length}`, 
      stats.errors.length === 0 ? 'green' : 'red');
  
  // –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  console.log('\n' + '-'.repeat(60));
  log('üéØ –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', 'cyan');
  
  if (successRate >= 95 && stats.errors.length < 5) {
    log('   ‚úÖ –û–¢–õ–ò–ß–ù–û - –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ', 'green');
  } else if (successRate >= 80 && stats.errors.length < 20) {
    log('   ‚ö†Ô∏è  –•–û–†–û–®–û - –ï—Å—Ç—å –Ω–µ–±–æ–ª—å—à–∏–µ –ø—Ä–æ–±–ª–µ–º—ã', 'yellow');
  } else {
    log('   ‚ùå –ü–õ–û–•–û - –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è', 'red');
  }
  
  console.log('='.repeat(60) + '\n');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
runLoadTest().then(() => {
  log('‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ', 'green');
  process.exit(0);
}).catch((err) => {
  log(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: ${err.message}`, 'red');
  console.error(err);
  process.exit(1);
});

